// Code generated by MockGen. DO NOT EDIT.
// Source: controller/controller.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	reflect "reflect"

	fiber "github.com/gofiber/fiber/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeController is a mock of EmployeeController interface.
type MockEmployeeController struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeControllerMockRecorder
}

// MockEmployeeControllerMockRecorder is the mock recorder for MockEmployeeController.
type MockEmployeeControllerMockRecorder struct {
	mock *MockEmployeeController
}

// NewMockEmployeeController creates a new mock instance.
func NewMockEmployeeController(ctrl *gomock.Controller) *MockEmployeeController {
	mock := &MockEmployeeController{ctrl: ctrl}
	mock.recorder = &MockEmployeeControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeController) EXPECT() *MockEmployeeControllerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEmployeeController) Delete(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmployeeControllerMockRecorder) Delete(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmployeeController)(nil).Delete), c)
}

// Get mocks base method.
func (m *MockEmployeeController) Get(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockEmployeeControllerMockRecorder) Get(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployeeController)(nil).Get), c)
}

// GetById mocks base method.
func (m *MockEmployeeController) GetById(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockEmployeeControllerMockRecorder) GetById(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockEmployeeController)(nil).GetById), c)
}

// Post mocks base method.
func (m *MockEmployeeController) Post(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockEmployeeControllerMockRecorder) Post(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockEmployeeController)(nil).Post), c)
}

// Put mocks base method.
func (m *MockEmployeeController) Put(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockEmployeeControllerMockRecorder) Put(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockEmployeeController)(nil).Put), c)
}
